name: Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/eddi-robotacademy/crezy-backend
  VERSION: ${{ github.sha }}
  NAME: crezy-backend
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-

      - name: Create application.yaml for CD Deploy
        run: |
          mkdir src/main/resources
          cd src/main/resources
          pwd
          echo "${{ secrets.APPLICATION_YAML }}" > application.yaml

      - name: Create properties for CD Deploy
        run: |
          cd src/main/resources
          pwd
          echo "${{ secrets.REDIS_PROPERTIES }}" > redis.properties
          echo "${{ secrets.YOUTUBE_PROPERTIES }}" > youtube.properties
          echo "${{ secrets.KAKAO_PROPERTIES }}" > kakao.properties
          echo "${{ secrets.GOOGLE_PROPERTIES }}" > google.properties
          echo "${{ secrets.NAVER_PROPERTIES }}" > naver.properties

      ## chmod gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      ### docker build & push to production
      - name: Docker build & push to prod
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{secrets.GHCR_TOKEN }}
          docker buildx create --name arm64builder --use
          docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/eddi-robotacademy/crezy-backend-server:latest --push .
          docker logout

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-backend ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop : true
          script: |
            pwd
            ls -al
            cd backend-actions-runner
            pwd
            if [[ "$(docker ps -q --filter ancestor=mysql:8.0)" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=mysql:8.0)
            fi
            echo "pass mysql-container"
            
            if [[ "$(docker ps -qa --filter ancestor=crezy-backend/crezy-backend-server:latest)" ]]; then
              docker rm -f $(docker pas -qa --filter ancestor=crezy-backend/crezy-backend-server:latest)
            fi
            echo "pass crezy-backend/crezy-backend-server:latest"
            
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}
            
            docker pull ghcr.io/eddi-robotacademy/crezy-backend:latest
            
            docker image prune -f
            docker logout
            docker-compose up -d
            
